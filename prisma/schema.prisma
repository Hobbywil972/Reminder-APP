// Prisma schema pour Reminder-APP
// Base PostgreSQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(COMMERCIAL)
  createdAt DateTime @default(now())
  reminders Reminder[]
  logs      Log[]
  contracts Contract[]
}

enum Role {
  ADMIN
  COMMERCIAL
}

model Client {
  id        Int      @id @default(autoincrement())
  name      String   @unique // Raison sociale
  contracts Contract[]
}

model Product {
  id          Int      @id @default(autoincrement())
  reference   String   @unique
  description String
  contractProducts ContractProduct[]
}

enum ContractStatus {
  EN_COURS
  EXPIRE
  RESILIE
}

model Contract {
  email        String? // Adresse email pour l'alerte de renouvellement
  id           Int      @id @default(autoincrement())
  client       Client   @relation(fields: [clientId], references: [id])
  clientId     Int
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  startDate    DateTime
  duration     Int // en mois
  reminders    Reminder[]
  contractProducts ContractProduct[]
  createdAt    DateTime @default(now())
  renewalAlertMonths Int?
  status       ContractStatus @default(EN_COURS)
}

model ContractProduct {
  id         Int      @id @default(autoincrement())
  contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  contractId Int
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  quantity   Int
}

model Reminder {
  id             Int      @id @default(autoincrement())
  contract       Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  contractId     Int
  user           User     @relation(fields: [userId], references: [id])
  userId         Int
  email          String
  alarmOffset    Int // mois avant échéance (1,2,3)
  nextAlarmDate  DateTime
  active         Boolean  @default(true)
  sentDates      DateTime[]
  createdAt      DateTime @default(now())
}

model Log {
  id        Int      @id @default(autoincrement())
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  action    String
  timestamp DateTime @default(now())
  ip        String?
}

model SmtpConfig {
  id       Int    @id @default(autoincrement())
  host     String
  port     Int
  user     String
  password String
  ssl      Boolean
  updatedAt DateTime @updatedAt
}

model EmailTemplate {
  id       Int    @id @default(autoincrement())
  name     String @unique
  subject  String
  body     String
  updatedAt DateTime @updatedAt
}
