# Architecture et Fonctionnalités de ReminderAPP v1

## 1. Vue d'ensemble
   - Application Next.js utilisant NextAuth.js pour l'authentification et Prisma comme ORM pour la gestion de la base de données.
   - L'application gère plusieurs rôles utilisateurs : ADMIN, SUPERADMIN, COMMERCIAL, et SOUSCRIPTEUR, chacun avec des interfaces et des permissions distinctes.
   - L'objectif principal est de permettre la gestion de clients, produits, contrats, et utilisateurs, ainsi que de fournir une interface aux souscripteurs pour visualiser leurs contrats.

## 2. Structure des Fichiers et Répertoires Principaux
   - `C:\Users\wg\CascadeProjects\Reminder-APP\` (Répertoire racine du projet)
     - `components/`: Contient les composants React réutilisables.
       - `Layout/AdminLayout.js`: Layout principal pour la plupart des pages de l'interface d'administration. Gère la sidebar de navigation et l'affichage des informations de l'utilisateur.
       - `AddClientSPA.js`, `AddProductSPA.js`, `AddContractSPA.js`, etc. : Composants pour les formulaires d'ajout/modification en mode Single Page Application (SPA), améliorant l'expérience utilisateur.
         - Le composant `AddContractSPA.js` a été optimisé : le champ de recherche de produit est vidé après chaque ajout, et le champ email pour l'alerte est pré-rempli avec l'email de l'utilisateur connecté.
       - `SortableTh.js`: Composant pour créer des en-têtes de tableau triables.
       - D'autres composants utilitaires (ex: modales, éléments de formulaire spécifiques).
     - `pages/`: Définit la structure de routing de l'application Next.js.
       - `admin/`: Contient les pages et la logique de l'interface d'administration.
         - `index.js`: Point d'entrée principal de l'interface d'administration, qui affiche dynamiquement les sections (utilisateurs, clients, produits, etc.) en fonction d'un paramètre d'URL `section`.
         - `clients.js`, `products.js`, `contracts.js`, `souscripteurs.js`, `users.js`: Fichiers (ou composants importés) qui définissent le contenu de chaque section de l'interface d'administration.
           - La section `contracts.js` a été améliorée avec des filtres par commercial, par date de début et de fin de contrat, ainsi que la possibilité de supprimer des contrats.
           - La section `clients.js` a vu son filtre de recherche corrigé pour permettre une recherche par sous-chaîne plus intuitive.
         - `creer.js` (souvent dans des sous-dossiers comme `admin/souscripteurs/creer.js`): Pages dédiées à la création de nouvelles entités.
         - `[id].js` (souvent dans des sous-dossiers comme `admin/souscripteurs/[id].js`): Pages dynamiques pour la visualisation ou la modification d'une entité spécifique.
       - `api/`: Contient les endpoints de l'API Next.js.
         - `auth/[...nextauth].js`: Fichier central pour la configuration de NextAuth.js (stratégies d'authentification, callbacks, etc.).
         - `admin/`: Ensemble d'APIs RESTful pour les opérations CRUD (Create, Read, Update, Delete) sur les entités gérées par l'admin (clients, produits, contrats, utilisateurs, souscripteurs). Ces APIs incluent la validation des rôles.
         - `souscripteur/contracts.js`: API spécifique permettant aux utilisateurs avec le rôle SOUSCRIPTEUR de récupérer la liste de leurs contrats.
       - `auth/signin.js`: Page de connexion personnalisée pour l'application.
       - `commercial/dashboard.js`: Tableau de bord spécifique pour les utilisateurs ayant le rôle COMMERCIAL, avec son propre layout et ses propres sections.
       - `souscripteur/dashboard.js`: Tableau de bord spécifique pour les utilisateurs ayant le rôle SOUSCRIPTEUR, leur permettant de visualiser leurs informations personnelles et leurs contrats.
       - `index.js`: Page d'accueil de l'application, qui agit comme un point de dispatching en redirigeant les utilisateurs vers le tableau de bord approprié en fonction de leur rôle, ou vers la page de connexion s'ils ne sont pas authentifiés.
     - `prisma/`: Contient tout ce qui est lié à Prisma ORM.
       - `schema.prisma`: Fichier de définition du schéma de la base de données (modèles, relations, types de données).
       - `migrations/`: Répertoire contenant les migrations SQL générées par Prisma Migrate, reflétant l'évolution du schéma.
     - `public/`: Pour les fichiers statiques accessibles publiquement (ex: images comme `logo-infodom.png`).
     - `lib/`: Peut contenir des fichiers utilitaires, comme une instance partagée du client Prisma (`prisma.js`).
     - `styles/`: Pour les fichiers CSS globaux ou les modules CSS (si utilisés).

## 3. Authentification (NextAuth.js)
   - La configuration se trouve dans `pages/api/auth/[...nextauth].js`.
   - Utilisation du fournisseur `Credentials` pour une authentification par email et mot de passe.
     - La fonction `authorize` valide les identifiants fournis contre la table `User` dans la base de données (après avoir déhashé le mot de passe stocké).
   - Callbacks JWT et Session :
     - Le callback `jwt` est utilisé pour enrichir le JSON Web Token avec des informations utilisateur supplémentaires (comme `id` et `role`) après une connexion réussie.
     - Le callback `session` est utilisé pour transférer ces informations du token vers l'objet `session` accessible côté client.
   - Gestion des rôles utilisateurs (stockés dans `User.role` en base de données) :
     - `ADMIN`, `SUPERADMIN`: Ont généralement un accès complet à toutes les fonctionnalités de l'interface d'administration.
     - `COMMERCIAL`: A un accès plus restreint, typiquement aux sections Clients, Produits, et Contrats de l'interface d'administration, et à son propre tableau de bord (`/commercial/dashboard`).
     - `SOUSCRIPTEUR`: A accès uniquement à son tableau de bord (`/souscripteur/dashboard`) pour consulter ses informations et contrats.
   - La redirection après connexion est gérée par `callbackUrl` dans NextAuth, souvent initialisée depuis `pages/auth/signin.js` et pointant vers `pages/index.js` pour le dispatching.
   - La déconnexion est gérée par la fonction `signOut()` de `next-auth/react`, avec une redirection vers la page de connexion.

## 3.5. Rôles et Permissions
   L'application définit plusieurs rôles avec des niveaux d'accès différents. La vérification des permissions est effectuée à la fois côté serveur (API, `getServerSideProps`) et côté client (UI).

   - **ADMIN / SUPERADMIN**: Accès complet à toutes les fonctionnalités d'administration.
   - **SOUSCRIPTEUR**: Accès en lecture seule à un tableau de bord affichant les contrats du client auquel il est associé.
   - **COMMERCIAL**: Rôle intermédiaire avec des permissions étendues pour la gestion des clients et des souscripteurs.
       - **Gestion des Clients**:
           - Peut lister, créer, **modifier** et **supprimer** des clients.
           - L'accès est géré via le dashboard `pages/commercial/dashboard.js` et les permissions sont définies dans l'API `pages/api/admin/clients.js` pour les méthodes `GET`, `POST`, `PUT` et `DELETE`.
       - **Gestion des Souscripteurs**:
           - Peut lister, créer, modifier et supprimer des souscripteurs.
           - L'interface est intégrée dans le dashboard commercial (`pages/commercial/dashboard.js`).
           - Les permissions sont définies au niveau des APIs (`/api/admin/list-souscripteurs`, `/api/admin/souscripteurs`, `/api/admin/souscripteurs/[id]`) et des pages (`/admin/souscripteurs/creer.js`, `/admin/souscripteurs/modifier/[id].js`).
           - A également accès à l'API `/api/admin/clients-for-select` pour peupler les formulaires.

## 4. Layouts et Structure des Pages
   - **Layout Admin (`components/Layout/AdminLayout.js`):**
     - Utilisé comme wrapper pour la plupart des pages sous `/admin`.
     - Fournit une structure cohérente avec une sidebar de navigation (liens dynamiques basés sur le rôle) et un header affichant les informations de l'utilisateur connecté.
   - **Layout Commercial (`pages/commercial/dashboard.js`):**
     - Ce fichier définit son propre layout complet, incluant une sidebar et un header spécifiques pour l'interface commerciale. Il n'utilise pas `AdminLayout.js`.
     - La navigation interne se fait par mise à jour de l'état local `section`.
   - **Layout Souscripteur (`pages/souscripteur/dashboard.js`):**
     - Page simple, sans sidebar de navigation complexe. L'accent est mis sur l'affichage direct des informations.
   - **Page de Connexion (`pages/auth/signin.js`):**
     - Formulaire de connexion personnalisé, utilisant `getCsrfToken()` pour la protection CSRF.

## 5. Logique des Pages Principales et Navigation
   - **`pages/index.js` (Dispatching Central):**
     - Vérifie la session de l'utilisateur.
     - Redirige vers `/admin`, `/commercial/dashboard`, ou `/souscripteur/dashboard` en fonction du `session.user.role`.
     - Si l'utilisateur n'est pas authentifié, il est redirigé vers `/auth/signin`.
   - **`pages/admin/index.js` (Hub de l'Interface Admin):**
     - Utilise `AdminLayout.js`.
     - Affiche dynamiquement différentes sections (Users, Clients, Products, etc.) basées sur un paramètre de requête `section` dans l'URL (ex: `/admin?section=users`).
     - Les liens dans la sidebar de `AdminLayout` mettent à jour ce paramètre `section` pour changer la vue affichée.
   - **`pages/commercial/dashboard.js` (Tableau de Bord Commercial):**
     - Layout autonome avec sa propre sidebar.
     - Gère l'affichage de différentes vues (Dashboard avec widgets, Clients, Produits, Contrats) via un état local `section`.
   - **`pages/souscripteur/dashboard.js` (Tableau de Bord Souscripteur):**
     - Récupère et affiche les contrats du souscripteur connecté via l'API `/api/souscripteur/contracts`.
     - Affiche les détails des contrats, y compris les produits associés (avec un tooltip pour la description du produit).
     - Calcule et affiche la date de fin des contrats à partir de la date de début et de la durée.

## 6. API Endpoints (sous `pages/api/`)
   - **`auth/[...nextauth].js`**: Gère toutes les routes liées à l'authentification (connexion, déconnexion, session, CSRF).
   - **`admin/` (multiples fichiers et routes dynamiques):**
     - Fournit des endpoints CRUD pour les entités : `users`, `clients`, `products`, `contracts`, `souscripteurs`.
     - Par exemple, `GET /api/admin/clients` pour lister les clients, `POST /api/admin/clients` pour en créer un nouveau.
     - `clients-for-select.js`: Endpoint pour lister les clients de manière simplifiée, typiquement pour les menus déroulants.
     - `export-csv.js`, `import-csv.js`: Endpoints pour gérer l'export et l'import de données en format CSV.
     - Toutes ces routes incluent une vérification du rôle de l'utilisateur pour la sécurité.
   - **`souscripteur/contracts.js`:**
     - Endpoint `GET` qui permet à un utilisateur SOUSCRIPTEUR authentifié de récupérer les contrats associés à son `clientId`.
     - L'API s'assure d'inclure les détails des produits liés à chaque contrat via la table de jointure `ContractProduct` et gère la sauvegarde du champ `commentaire`.

## 7. Base de Données (Prisma - `prisma/schema.prisma`)
   - Modèles principaux définis dans `schema.prisma`:
     - `User`: Stocke les informations des utilisateurs, y compris `email` (unique), `password` (hashé), `name`, et `role` (enum: ADMIN, SUPERADMIN, COMMERCIAL, SOUSCRIPTEUR). Peut aussi avoir un `clientId` si l'utilisateur est un souscripteur lié à un client.
     - `Client`: Représente une entité cliente avec des informations comme `name`, `email`, `address`, etc.
     - `Product`: Définit les produits avec une `reference` (unique) et une `description`.
     - `Contract`: Représente un contrat avec un `status`, `startDate` (DateTime), `duration` (Int, en mois), un champ optionnel `commentaire` (String), et est lié à un `Client` (relation `clientId`).
     - `ContractProduct`: Table de jointure pour la relation plusieurs-à-plusieurs entre `Contract` et `Product`, permettant à un contrat d'avoir plusieurs produits et à un produit d'être dans plusieurs contrats.
   - Relations clés :
     - `User` (SOUSCRIPTEUR) 1 --- 1 `Client` (via le champ optionnel `clientId` sur le modèle `User`).
     - `Client` 1 --- * `Contract` (un client peut avoir plusieurs contrats).
     - `Contract` * --- * `Product` (via la table `ContractProduct`).

## 8. Fonctionnalités Clés Implémentées
   - Système d'authentification robuste avec gestion des rôles.
   - Interfaces utilisateurs distinctes et adaptées pour les rôles Admin, Commercial, et Souscripteur.
   - Opérations CRUD complètes pour les entités principales (Utilisateurs, Clients, Produits, Contrats, Souscripteurs) via l'interface d'administration.
   - Affichage personnalisé des contrats pour les souscripteurs, incluant les détails des produits et le calcul de la date de fin.
   - Tooltip affichant la description complète du produit au survol de sa référence dans la liste des contrats.
   - Fonctionnalités d'import et d'export de données au format CSV pour certaines entités (gérées par l'Admin).
   - Capacités de recherche et de tri dans les tableaux de données de l'interface d'administration.

## 9. Points d'Attention et Logiques Spécifiques
   - **Sécurité et Contrôle d'Accès:** La logique de vérification des rôles est cruciale et est implémentée à la fois côté client (pour masquer/afficher des éléments d'interface) et côté serveur (dans `getServerSideProps` pour la protection des pages et dans les API handlers pour la protection des données).
   - **Gestion de l'état et Fetching de Données:** Utilisation de `useState` et `useEffect` pour la gestion de l'état local et le fetching de données côté client. `getServerSideProps` est utilisé pour le fetching de données avant le rendu de la page lorsque nécessaire, ou pour la protection de route.
   - **Composants SPA pour Formulaires:** Des composants comme `AddClientSPA.js` sont utilisés pour créer une expérience utilisateur plus dynamique lors de l'ajout ou de la modification de données, en évitant les rechargements complets de page.
   - **Cohérence de l'UI:** L'utilisation de layouts partagés (`AdminLayout.js`) aide à maintenir une interface utilisateur cohérente pour les sections d'administration. Les dashboards spécifiques (`commercial/dashboard.js`, `souscripteur/dashboard.js`) ont leur propre structure adaptée à leur fonction.
   - **Gestion des Migrations Prisma :** En cas de désynchronisation entre le `schema.prisma` et la base de données (provoquant des erreurs de migration), la procédure de résolution consiste à utiliser `npx prisma db pull` pour réaligner le schéma sur l'état de la base, puis `npx prisma generate` pour mettre à jour le client Prisma. Cette étape est cruciale avant de tenter de nouvelles migrations.
   - **Standard de Sécurisation des API :** Pour assurer une authentification fiable, en particulier sur des plateformes comme Vercel, la méthode `getServerSession(req, res, authOptions)` est désormais la norme pour sécuriser les points d'API. Elle remplace l'ancienne approche `getToken`, qui s'est avérée moins robuste pour récupérer les sessions dans certains contextes. Cette méthode est utilisée dans les API handlers pour valider la session et le rôle de l'utilisateur avant d'autoriser l'accès aux ressources.

## 10. Mises à jour récentes (10 Juillet 2025)

   - **Correction du Tableau de Bord Commercial :**
     - **Problème :** Les widgets du tableau de bord commercial (`pages/commercial/CommercialDashboardWidgets.js`) affichaient des statistiques globales (tous départements confondus) car ils utilisaient les API d'administration (`/api/admin/clients`, `/api/admin/contracts`).
     - **Solution :**
       - Création d'un nouvel endpoint API dédié : `/api/commercial/stats.js`. Cet endpoint est sécurisé et retourne les statistiques (nombre de clients, de contrats, et de contrats arrivant à échéance) filtrées par le `departementId` du commercial authentifié.
       - Mise à jour du composant `CommercialDashboardWidgets.js` pour qu'il interroge ce nouvel endpoint, garantissant ainsi que les données affichées sont exactes et pertinentes pour l'utilisateur connecté.

   - **Enrichissement de la Session Utilisateur (NextAuth) :**
     - **Problème :** Le `departementId`, nécessaire pour filtrer les données, n'était pas disponible dans l'objet session de l'utilisateur.
     - **Solution :** Modification du fichier de configuration de NextAuth (`pages/api/auth/[...nextauth].js`). Le `departementId` est maintenant ajouté à l'objet utilisateur lors de l'authentification (dans la fonction `authorize`) et propagé au token JWT et à l'objet session via les callbacks `jwt` et `session`.

   - **Extension de la Validation des Emails de Contrat :**
     - **Problème :** Le formulaire d'ajout/modification de contrat n'autorisait que les adresses email se terminant par `@infodom.com`.
     - **Solution :** La logique de validation a été étendue pour accepter également les domaines `@dataguadeloupe.com` et `@antiane.com`. Cette modification a été appliquée à deux niveaux pour assurer la cohérence :
       - Côté client, dans le composant `components/AddContractSPA.js`.
       - Côté serveur, dans l'API `pages/api/admin/contracts.js`.

## 11. Modules dédiés au rôle COMMERCIAL (Contrats, Produits, Clients)

### 11.1 Front-End
- `pages/commercial/dashboard.js` : page racine du commercial (layout, sidebar, routing interne).
- `components/CommercialDashboardWidgets.js` : widgets statistiques (nb clients, nb contrats, échéances).
- `components/CommercialContractsSection.js` : gestion complète des contrats (liste, filtres, tri, pagination, ajout/édition via `AddContractSPA`). La colonne « Commercial » affiche désormais `contract.user.name` (nom du créateur du contrat) ; fallback « N/A » si absent.
- `components/AddContractSPA.js` : formulaire SPA pour créer/éditer un contrat.
- `components/SortableTh.js` : entêtes triables partagés.
- `components/AddClientSPA.js`, `components/EditClientSPA.js` : formulaires SPA pour les clients accessibles au commercial.

### 11.2 API Back-End
- `pages/api/commercial/contracts.js` : CRUD sur les contrats filtrés par `departementId`. Depuis 10 juil 2025, la requête `GET` inclut la relation `user { select: { name } }` afin que le frontend puisse afficher le nom du commercial ayant créé le contrat.
- `pages/api/commercial/clients.js` : liste des clients du département.
- `pages/api/commercial/stats.js` : statistiques pour les widgets.
- Lecture seule des produits via `pages/api/admin/products.js` (pas de route dédiée « commercial/products »).

### 11.3 Flux de données
1. `dashboard.js` récupère `departementId` avec `getServerSideProps`.
2. Les sections appellent les endpoints ci-dessus en passant `departementId` dans la query-string.
3. Les résultats alimentent les composants de liste (contrats, clients) qui appliquent tri, pagination et filtres côté client.

### 11.4 Spécificités d’accès
- Visibilité restreinte : un commercial ne voit que les entités de son département.
- Sécurité : chaque handler API valide la session via `getServerSession` et vérifie le rôle `COMMERCIAL`.
- Filtres UI : champs Client, Référence produit, Commentaire, Commercial, plages de dates, avec bouton Réinitialiser.

---

Ce document est basé sur ma compréhension actuelle de l'application ReminderAPP au 10 juillet 2025. Il a été mis à jour pour documenter l'utilisation de `getServerSession` comme standard de sécurisation des API, résolvant un problème d'authentification sur Vercel.

## 12. Configuration base de données & variables d’environnement (12 juillet 2025)

### 12.1 Base de données de production
- **Fournisseur :** Neon (PostgreSQL serverless).
- **Nom de la base :** `neondb`.
- **Branche active :** `Primary` (aucune autre branche définie pour le moment).
- **URL pooler (utilisée par Vercel & scripts) :**  
  `postgres://neondb_owner:npg_nfcwo7uI2JbM@ep-lucky-cloud-ablm1b0m-pooler.eu-west-2.aws.neon.tech/neondb?sslmode=require&connect_timeout=30`

### 12.2 Variables d’environnement (Vercel & local)
| Variable | Description | Valeur actuelle |
|----------|-------------|-----------------|
| `DATABASE_URL` | Chaîne de connexion principale pour Prisma (production) | voir URL ci-dessus |
| `DATABASE_URL_WITH_TIMEOUT` | Variante permettant d’ajouter un `connect_timeout` (utilisée ponctuellement) | même valeur que `DATABASE_URL` |

### 12.3 Script de mise à jour des clients (département)
- **Fichier :** `scripts/setContractsDepartement.js`
- **Rôle :** met à jour le champ `departementId` de tous les clients vers l’ID du département « INFODOM_Martinique ».
- **Commande à exécuter (exemple) :**
  ```powershell
  $env:DATABASE_URL = "<URL pooler>"
  node scripts/setContractsDepartement.js
  ```
- **Résultat attendu :**
  - Affiche `Clients mis à jour : <nombre>` (exemple 28).
  - Après exécution, la requête SQL suivante doit retourner un nombre > 0 :
    ```sql
    SELECT COUNT(*)
    FROM "Client"
    WHERE "departementId" IS NOT NULL;
    ```

> **Astuce :** lorsqu’on exécute des scripts Prisma, c’est toujours `DATABASE_URL` (et non `*_WITH_TIMEOUT`) qui est lue par défaut. Vérifier et définir la bonne variable avant d’exécuter un script.

Ce chapitre centralise tous les éléments nécessaires pour manipuler la base de données de production sans avoir à redemander les informations sensibles.

Il pourra nécessiter des mises à jour si l'application continue d'évoluer.

## 13. Notifications par Email & Cron (12 juillet 2025)

### 13.1 Vue d’ensemble
Le système de notifications envoie automatiquement des emails de rappel (renouvellement) ou d’expiration de contrat. Il repose sur :
1. Le **modèle Prisma `Reminder`** qui stocke les alarmes.
2. Une **Scheduled Function Vercel** (cron) définie dans `vercel.json`.
3. L’endpoint **`/api/cron-send-notifications`** qui exécute la logique d’envoi.
4. Les modèles d’email **`reminder`** et **`expiration`** dans la table `EmailTemplate`.

### 13.2 Création / Mise à jour d’un Reminder
| Étape | Fichier | Action |
|-------|---------|--------|
| Création de contrat | `pages/api/admin/contracts.js` (`POST`) | Après la création du contrat, un `Reminder` est automatiquement créé si `renewalAlertMonths > 0`. |
| Modification de contrat | `pages/api/admin/contracts.js` (`PUT`) | Si le contrat est modifié, le `Reminder` existant est mis à jour (dates, email, offset). |

Le calcul de la **`nextAlarmDate`** suit la formule :
```
nextAlarmDate = startDate + duration(months) - renewalAlertMonths(months)
```
Elle est normalisée à minuit (00:00:00) pour un matching plus simple.

### 13.3 Structure du modèle `Reminder`
- `contractId` : FK vers le contrat.
- `userId` : commercial responsable (utilisé pour l’historique).
- `email` : adresse destinataire (contrat/client).
- `alarmOffset` : nombre de mois avant la fin du contrat où envoyer le rappel.
- `nextAlarmDate` : date toujours arrondie à minuit.
- `active` : booléen permettant de désactiver l’alarme.
- `sentDates` : tableau de dates ISO où un mail a déjà été envoyé (évite les doublons la même journée).

### 13.4 Cron Vercel
`vercel.json` :
```json
{
  "crons": [
    {
      "path": "/api/cron-send-notifications",
      "schedule": "0 5 * * *"
    }
  ]
}
```
- **Planification** : tous les jours à 05:00 UTC (fenêtre flexible ±1h sur le plan Hobby).
- **Exécution** : Vercel effectue un appel `POST` vers l’endpoint.
- **Administration** : Project ▸ *Settings* ▸ *Cron Jobs* (boutons **Run** & **View Logs**).

### 13.5 Traitement dans `/api/cron-send-notifications`
1. Récupère la date du jour (`today`) en UTC, arrondie à minuit.
2. `Prisma.reminder.findMany({ where: { nextAlarmDate: today, active: true, contract: { status: { not: 'RESILIE' } } } })`
3. Boucle sur chaque rappel :
   - Récupère le contrat, le client et les produits (jointures incluses).
   - Choisit le template : `reminder` (rappel simple) ou `expiration` (fin de contrat) selon le statut.
   - Appelle `sendMail({ to: reminder.email, template, params })` (wrap de **Nodemailer**).
   - Push `today` dans `sentDates` et (optionnel) recalcule la prochaine date si rappel récurrent.
4. Retourne un JSON : `{ remindersSent: N }` et logue les erreurs.

### 13.6 Configuration SMTP (`config.smtp.json`)
```json
{
  "host": "smtp.infodom.com",
  "port": 587,
  "secure": false,
  "auth": {
    "user": "no-reply@infodom.com",
    "pass": "********"
  }
}
```
Le fichier est **server-side only** ; il n’est jamais embarqué côté client.

### 13.7 Surveillance & Tests
- **Run manuel** : bouton *Run* depuis *Settings ▸ Cron Jobs* ou `curl -X POST https://<domain>/api/cron-send-notifications`.
- **Logs** : bouton *View Logs* ou l’onglet *Functions ▸ Scheduled*.
- **Alertes** : en cas d’échec, Vercel marque la run en rouge et affiche la stacktrace.

### 13.8 Points d’extension
- Ajouter un champ `lastSentAt` si besoin d’historique global.
- Support multi-langue en dupliquant les templates email.
- Possibilité de planifier plusieurs crons (ex : hebdo, mensuel) via `vercel.json`.

---
Fin de la section 13.

